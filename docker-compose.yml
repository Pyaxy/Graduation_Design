services:
  backend:
    build:
        context: ./backend
        dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/code
      - ./backend/docker/entrypoint.sh:/entrypoint.sh
    env_file:
        - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm run dev
    volumes:
      - ./frontend/:/app
      - ./frontend/docker/entrypoint.sh:/entrypoint.sh
      - /app/node_modules # 防止宿主机覆盖容器内依赖
    environment:
      - CHOKIDAR_USRPOLLING=true
    ports:
      - "5173:5173"

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
        - "5432:5432"

volumes:
  postgres_data:

